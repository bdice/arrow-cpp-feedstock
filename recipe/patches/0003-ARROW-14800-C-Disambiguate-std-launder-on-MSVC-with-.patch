From e22394713e0bc260e935028459201da1f3fc2aed Mon Sep 17 00:00:00 2001
From: Antoine Pitrou <antoine@python.org>
Date: Wed, 1 Dec 2021 19:23:45 +0100
Subject: [PATCH 3/3] ARROW-14800: [C++] Disambiguate std::launder on MSVC with
 C++17 enabled
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Closes #11806 from pitrou/ARROW-14800-launder-disambiguate

Authored-by: Antoine Pitrou <antoine@python.org>
Signed-off-by: Krisztián Szűcs <szucs.krisztian@gmail.com>
---
 .github/workflows/cpp.yml            | 5 +++--
 cpp/src/arrow/util/aligned_storage.h | 9 ++++++---
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/.github/workflows/cpp.yml b/.github/workflows/cpp.yml
index 0f19f7351..f92bdc63c 100644
--- a/.github/workflows/cpp.yml
+++ b/.github/workflows/cpp.yml
@@ -165,7 +165,7 @@ jobs:
           ci/scripts/cpp_test.sh $(pwd) $(pwd)/build
 
   windows:
-    name: AMD64 ${{ matrix.name }} C++
+    name: AMD64 ${{ matrix.name }} C++17
     runs-on: ${{ matrix.os }}
     if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
     timeout-minutes: 45
@@ -184,6 +184,7 @@ jobs:
       ARROW_BUILD_SHARED: ON
       ARROW_BUILD_STATIC: OFF
       ARROW_BUILD_TESTS: ON
+      ARROW_CXXFLAGS: "/std:c++17"
       ARROW_DATASET: ON
       ARROW_FLIGHT: OFF
       ARROW_HDFS: ON
@@ -205,7 +206,7 @@ jobs:
       CMAKE_INSTALL_LIBDIR: bin
       CMAKE_INSTALL_PREFIX: /usr
       CMAKE_UNITY_BUILD: ON
-      NPROC: 2
+      NPROC: 3
     steps:
       - name: Disable Crash Dialogs
         run: |
diff --git a/cpp/src/arrow/util/aligned_storage.h b/cpp/src/arrow/util/aligned_storage.h
index f6acb36c9..213d8c72e 100644
--- a/cpp/src/arrow/util/aligned_storage.h
+++ b/cpp/src/arrow/util/aligned_storage.h
@@ -33,13 +33,16 @@ class AlignedStorage {
   static constexpr bool can_memcpy = std::is_trivial<T>::value;
 
 #if __cpp_constexpr >= 201304L  // non-const constexpr
-  constexpr T* get() noexcept { return launder(reinterpret_cast<T*>(&data_)); }
+  constexpr T* get() noexcept {
+    return arrow::internal::launder(reinterpret_cast<T*>(&data_));
+  }
 #else
-  T* get() noexcept { return launder(reinterpret_cast<T*>(&data_)); }
+  T* get() noexcept { return arrow::internal::launder(reinterpret_cast<T*>(&data_)); }
 #endif
 
   constexpr const T* get() const noexcept {
-    return launder(reinterpret_cast<const T*>(&data_));
+    // Use fully qualified name to avoid ambiguities with MSVC (ARROW-14800)
+    return arrow::internal::launder(reinterpret_cast<const T*>(&data_));
   }
 
   void destroy() noexcept {
-- 
2.37.0.windows.1

